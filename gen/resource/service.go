// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource service
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package resource

import (
	"context"

	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goa "goa.design/goa/v3/pkg"
)

// The resource service provides all resources information
type Service interface {
	// Get all Resources
	All(context.Context) (res []*Resource, err error)
	// Get one Resource info
	Info(context.Context, *InfoPayload) (res *Resource, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "resource"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"All", "Info"}

// InfoPayload is the payload type of the resource service Info method.
type InfoPayload struct {
	// ID of resource to be shown
	ResourceID uint
}

// Resource is the result type of the resource service Info method.
type Resource struct {
	// ID is the unique id of the resource
	ID uint
	// Name of the resource
	Name string
	// Display name of the resource
	DisplayName string
	// Type of catalog where resource belongs
	Catalog *Catalog
	// Type of resource
	Type string
	// Description of resource
	Description string
	// Latest version o resource
	LatestVersion string
	// Tags related to resources
	Tags []*Tag
	// Rating of resource
	Rating uint
	// Date when resource was last updated
	LastUpdatedAt string
	// Version of resource
	Versions []*Versions
}

type Catalog struct {
	// ID is the unique id of the category
	ID uint
	// Type of support tier
	Type string
}

type Tag struct {
	// ID is the unique id of the tag
	ID uint
	// Name of the tag
	Name string
}

type Versions struct {
	// Version ID of the resource to be fetched
	VersionID uint
	// Version of the resource to be fetched
	Version string
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal-error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewResource initializes result type Resource from viewed result type
// Resource.
func NewResource(vres *resourceviews.Resource) *Resource {
	var res *Resource
	switch vres.View {
	case "default", "":
		res = newResource(vres.Projected)
	case "extended":
		res = newResourceExtended(vres.Projected)
	}
	return res
}

// NewViewedResource initializes viewed result type Resource from result type
// Resource using the given view.
func NewViewedResource(res *Resource, view string) *resourceviews.Resource {
	var vres *resourceviews.Resource
	switch view {
	case "default", "":
		p := newResourceView(res)
		vres = &resourceviews.Resource{Projected: p, View: "default"}
	case "extended":
		p := newResourceViewExtended(res)
		vres = &resourceviews.Resource{Projected: p, View: "extended"}
	}
	return vres
}

// newResource converts projected type Resource to service type Resource.
func newResource(vres *resourceviews.ResourceView) *Resource {
	res := &Resource{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.DisplayName != nil {
		res.DisplayName = *vres.DisplayName
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.LatestVersion != nil {
		res.LatestVersion = *vres.LatestVersion
	}
	if vres.Rating != nil {
		res.Rating = *vres.Rating
	}
	if vres.LastUpdatedAt != nil {
		res.LastUpdatedAt = *vres.LastUpdatedAt
	}
	if vres.Catalog != nil {
		res.Catalog = transformResourceviewsCatalogViewToCatalog(vres.Catalog)
	}
	if vres.Tags != nil {
		res.Tags = make([]*Tag, len(vres.Tags))
		for i, val := range vres.Tags {
			res.Tags[i] = transformResourceviewsTagToTag(val)
		}
	}
	return res
}

// newResourceExtended converts projected type Resource to service type
// Resource.
func newResourceExtended(vres *resourceviews.ResourceView) *Resource {
	res := &Resource{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.DisplayName != nil {
		res.DisplayName = *vres.DisplayName
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.LatestVersion != nil {
		res.LatestVersion = *vres.LatestVersion
	}
	if vres.Rating != nil {
		res.Rating = *vres.Rating
	}
	if vres.LastUpdatedAt != nil {
		res.LastUpdatedAt = *vres.LastUpdatedAt
	}
	if vres.Catalog != nil {
		res.Catalog = transformResourceviewsCatalogViewToCatalog(vres.Catalog)
	}
	if vres.Tags != nil {
		res.Tags = make([]*Tag, len(vres.Tags))
		for i, val := range vres.Tags {
			res.Tags[i] = transformResourceviewsTagToTag(val)
		}
	}
	if vres.Versions != nil {
		res.Versions = make([]*Versions, len(vres.Versions))
		for i, val := range vres.Versions {
			res.Versions[i] = transformResourceviewsVersionsViewToVersions(val)
		}
	}
	return res
}

// newResourceView projects result type Resource to projected type ResourceView
// using the "default" view.
func newResourceView(res *Resource) *resourceviews.ResourceView {
	vres := &resourceviews.ResourceView{
		ID:            &res.ID,
		Name:          &res.Name,
		DisplayName:   &res.DisplayName,
		Type:          &res.Type,
		Description:   &res.Description,
		LatestVersion: &res.LatestVersion,
		Rating:        &res.Rating,
		LastUpdatedAt: &res.LastUpdatedAt,
	}
	if res.Catalog != nil {
		vres.Catalog = transformCatalogToResourceviewsCatalogView(res.Catalog)
	}
	if res.Tags != nil {
		vres.Tags = make([]*resourceviews.Tag, len(res.Tags))
		for i, val := range res.Tags {
			vres.Tags[i] = transformTagToResourceviewsTag(val)
		}
	}
	return vres
}

// newResourceViewExtended projects result type Resource to projected type
// ResourceView using the "extended" view.
func newResourceViewExtended(res *Resource) *resourceviews.ResourceView {
	vres := &resourceviews.ResourceView{
		ID:            &res.ID,
		Name:          &res.Name,
		DisplayName:   &res.DisplayName,
		Type:          &res.Type,
		Description:   &res.Description,
		LatestVersion: &res.LatestVersion,
		Rating:        &res.Rating,
		LastUpdatedAt: &res.LastUpdatedAt,
	}
	if res.Catalog != nil {
		vres.Catalog = transformCatalogToResourceviewsCatalogView(res.Catalog)
	}
	if res.Tags != nil {
		vres.Tags = make([]*resourceviews.Tag, len(res.Tags))
		for i, val := range res.Tags {
			vres.Tags[i] = transformTagToResourceviewsTag(val)
		}
	}
	if res.Versions != nil {
		vres.Versions = make([]*resourceviews.VersionsView, len(res.Versions))
		for i, val := range res.Versions {
			vres.Versions[i] = transformVersionsToResourceviewsVersionsView(val)
		}
	}
	return vres
}

// transformResourceviewsCatalogViewToCatalog builds a value of type *Catalog
// from a value of type *resourceviews.CatalogView.
func transformResourceviewsCatalogViewToCatalog(v *resourceviews.CatalogView) *Catalog {
	if v == nil {
		return nil
	}
	res := &Catalog{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// transformResourceviewsTagToTag builds a value of type *Tag from a value of
// type *resourceviews.Tag.
func transformResourceviewsTagToTag(v *resourceviews.Tag) *Tag {
	if v == nil {
		return nil
	}
	res := &Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformResourceviewsVersionsViewToVersions builds a value of type
// *Versions from a value of type *resourceviews.VersionsView.
func transformResourceviewsVersionsViewToVersions(v *resourceviews.VersionsView) *Versions {
	if v == nil {
		return nil
	}
	res := &Versions{
		VersionID: *v.VersionID,
		Version:   *v.Version,
	}

	return res
}

// transformCatalogToResourceviewsCatalogView builds a value of type
// *resourceviews.CatalogView from a value of type *Catalog.
func transformCatalogToResourceviewsCatalogView(v *Catalog) *resourceviews.CatalogView {
	res := &resourceviews.CatalogView{
		ID:   &v.ID,
		Type: &v.Type,
	}

	return res
}

// transformTagToResourceviewsTag builds a value of type *resourceviews.Tag
// from a value of type *Tag.
func transformTagToResourceviewsTag(v *Tag) *resourceviews.Tag {
	res := &resourceviews.Tag{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}

// transformVersionsToResourceviewsVersionsView builds a value of type
// *resourceviews.VersionsView from a value of type *Versions.
func transformVersionsToResourceviewsVersionsView(v *Versions) *resourceviews.VersionsView {
	if v == nil {
		return nil
	}
	res := &resourceviews.VersionsView{
		VersionID: &v.VersionID,
		Version:   &v.Version,
	}

	return res
}
