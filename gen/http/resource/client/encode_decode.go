// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	resource "github.com/tektoncd/hub/api/gen/resource"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildAllRequest instantiates a HTTP request object with method and path set
// to call the "resource" service "All" endpoint
func (c *Client) BuildAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AllResourcePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "All", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAllResponse returns a decoder for responses returned by the resource
// All endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAllResponse may return the following errors:
//	- "internal-error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "All", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateResourceResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("resource", "All", err)
			}
			res := NewAllResourceOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body AllInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "All", err)
			}
			err = ValidateAllInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resource", "All", err)
			}
			return nil, NewAllInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "All", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceResponseToResourceResource builds a value of type
// *resource.Resource from a value of type *ResourceResponse.
func unmarshalResourceResponseToResourceResource(v *ResourceResponse) *resource.Resource {
	res := &resource.Resource{
		ID:            *v.ID,
		Name:          *v.Name,
		Type:          v.Type,
		Description:   v.Description,
		LatestVersion: v.LatestVersion,
		Rating:        v.Rating,
		LastUpdatedAt: v.LastUpdatedAt,
	}
	if v.Catalog != nil {
		res.Catalog = unmarshalCatalogResponseToResourceCatalog(v.Catalog)
	}
	if v.Tags != nil {
		res.Tags = make([]*resource.Tag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = unmarshalTagToResourceTag(val)
		}
	}

	return res
}

// unmarshalCatalogResponseToResourceCatalog builds a value of type
// *resource.Catalog from a value of type *CatalogResponse.
func unmarshalCatalogResponseToResourceCatalog(v *CatalogResponse) *resource.Catalog {
	if v == nil {
		return nil
	}
	res := &resource.Catalog{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// unmarshalTagToResourceTag builds a value of type *resource.Tag from a value
// of type *Tag.
func unmarshalTagToResourceTag(v *Tag) *resource.Tag {
	if v == nil {
		return nil
	}
	res := &resource.Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}
